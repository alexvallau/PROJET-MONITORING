from flask import Flask, jsonify, render_template
from pysnmp.hlapi import *
import threading
import time
import json
import os

app = Flask(__name__)
data_file = 'data.json'
data = []
snmp_target = '192.168.1.1'  # Replace with the target IP address
snmp_community = 'public'  # Replace with the SNMP community string
snmp_oid = '1.3.6.1.2.1.2.2.1.10.1'  # OID for ifOutOctets for the first interface

def load_data():
    global data
    if os.path.exists(data_file):
        with open(data_file, 'r') as file:
            data = json.load(file)

def save_data():
    with open(data_file, 'w') as file:
        json.dump(data, file)

def collect_data():
    previous_value = None
    while True:
        error_indication, error_status, error_index, var_binds = next(
            getCmd(SnmpEngine(),
                   CommunityData(snmp_community),
                   UdpTransportTarget((snmp_target, 161)),
                   ContextData(),
                   ObjectType(ObjectIdentity(snmp_oid)))
        )

        if error_indication:
            print(error_indication)
        elif error_status:
            print('%s at %s' % (error_status.prettyPrint(),
                                error_index and var_binds[int(error_index) - 1][0] or '?'))
        else:
            for var_bind in var_binds:
                current_value = int(var_bind[1])
                if previous_value is not None:
                    speed = current_value - previous_value
                    data.append(speed)
                    if len(data) > 60:  # Keep only the last 60 entries (1 minute of data if collected every second)
                        data.pop(0)
                    save_data()
                previous_value = current_value
        time.sleep(1)

@app.route('/data')
def get_data():
    return jsonify(data)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    load_data()
    threading.Thread(target=collect_data, daemon=True).start()
    app.run(debug=True)






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Data</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>Network Data</h1>
    <canvas id="myChart" width="400" height="200"></canvas>
    <script>
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Speed (Bytes/Second)',
                    data: [],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom'
                    }
                }
            }
        });

        async function fetchData() {
            const response = await fetch('/data');
            const data = await response.json();
            myChart.data.labels = data.map((_, index) => index);
            myChart.data.datasets[0].data = data;
            myChart.update();
        }

        setInterval(fetchData, 1000);
    </script>
</body>
</html>